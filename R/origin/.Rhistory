# reviews.word
reviews.word %>%
inner_join(get_sentiments("bing"), by="word")
# reviews.word
reviews.word %>%
inner_join(get_sentiments("bing"), by="word") -> test
which(test$id == 536)
which(test$id == 536)
which(test$id == 536)->b
test[b,]
abs(-1)
abs(-2)
result$score
result$score>75
which(result$score>75) # 75점 이상인거거
reviews.id = c(1:length(reviews.all))
reviews <- tibble("id" = reviews.id, "content"=reviews.all)
# View(reviews.all)
reviews.word <- reviews %>%
unnest_tokens(word, content)
# reviews.word
reviews.word %>%
inner_join(get_sentiments("bing"), by="word") -> test
which(test$id == 536)->b
test[b,]
result <- reviews.word %>%
inner_join(get_sentiments("bing"), by="word") %>%
mutate(wordScore=ifelse(sentiment=="positive", 1, -1)) %>%
group_by(id) %>%
summarise(score=sum(wordScore),total=sum(abs(wordScore)))
which(result$score>75) # 75점 이상인거거
result.table<-table(result$score)
result.table<-as.data.frame(result.table,stringsAsFactors = F)
result.table$Var1<-as.integer(result.table$Var1)
result.table
table.len<-length(result.table$Var1)
number.of.positive.review = 0
number.of.negative.review = 0
number.of.neutral.review = 0
result.table$Var1[1]
for (i in 1:table.len){
ifelse(result.table$Var1[i] > 0, number.of.positive.review <- number.of.positive.review + result.table$Freq[i],
ifelse(result.table$Var1[i] < 0, number.of.negative.review <- number.of.negative.review + result.table$Freq[i],
number.of.neutral.review <- number.of.neutral.review + result.table$Freq[i]))
}
number.of.negative.review
number.of.positive.review
target.postop <- which.max(result$score) # 가장 점수가 높은 리뷰 indexing
result$total[536]
which(result$total>=70)
reviews$content[536]
reviews$content[which(result$total>=70)]
reviews$content[which(result$score>=20)]
reviews$content[target.postop]
reviews$content[536]
which(result$total>=70)
reviews$content[536]
which(result$total>=70)
result
result[536]
result[536,]
result[535,]
result[1,]
result[144,]
result[444,]
result[445,]
result[446,]
result[444,]
result[444,]
length(result)
length(result$id)
reviews.id = c(1:length(reviews.all))
reviews <- tibble("id" = reviews.id, "content"=reviews.all)
# View(reviews.all)
reviews.word <- reviews %>%
unnest_tokens(word, content)
# reviews.word
reviews.word %>%
inner_join(get_sentiments("bing"), by="word") -> test
which(test$id == 536)->b
test[b,]
result <- reviews.word %>%
inner_join(get_sentiments("bing"), by="word") %>%
mutate(wordScore=ifelse(sentiment=="positive", 1, -1)) %>%
group_by(id) %>%
summarise(score=sum(wordScore),total=sum(abs(wordScore)))
which(result$score>75) # 75점 이상인거거
result[1,]
result[1,]
result[1,]
result[555,]
length(result$id)
length(reviews.all)
length(result$id)
reviews[630,]
result <- reviews.word %>%
left_join(get_sentiments("bing"), by="word", all=T) %>%
mutate(wordScore=ifelse(sentiment=="positive", 1, -1)) %>%
group_by(id) %>%
summarise(score=sum(wordScore),total=sum(abs(wordScore)))
length(result$id)
length(reviews$id)
result <- reviews.word %>%
lnner_join(get_sentiments("bing"), by="word") %>%
mutate(wordScore=ifelse(sentiment=="positive", 1, -1)) %>%
group_by(id) %>%
summarise(score=sum(wordScore),total=sum(abs(wordScore)))
result <- reviews.word %>%
inner_join(get_sentiments("bing"), by="word") %>%
mutate(wordScore=ifelse(sentiment=="positive", 1, -1)) %>%
group_by(id) %>%
summarise(score=sum(wordScore),total=sum(abs(wordScore)))
result
reviews %>%
left_join(result,by="id",all=T)
result <- reviews.word %>%
inner_join(get_sentiments("bing"), by="word") %>%
mutate(wordScore=ifelse(sentiment=="positive", 1, -1)) %>%
group_by(id) %>%
summarise(score=sum(wordScore),total=sum(abs(wordScore)))
result<-reviews %>%
left_join(result,by="id",all=T)
length(result$id)
result.table<-table(result$score)
result.table<-as.data.frame(result.table,stringsAsFactors = F)
result.table$Var1<-as.integer(result.table$Var1)
result.table
table.len<-length(result.table$Var1)
number.of.positive.review = 0
number.of.negative.review = 0
number.of.neutral.review = 0
result.table$Var1[1]
for (i in 1:table.len){
ifelse(result.table$Var1[i] > 0, number.of.positive.review <- number.of.positive.review + result.table$Freq[i],
ifelse(result.table$Var1[i] < 0, number.of.negative.review <- number.of.negative.review + result.table$Freq[i],
number.of.neutral.review <- number.of.neutral.review + result.table$Freq[i]))
}
number.of.negative.review
number.of.positive.review
result[444,]
length(result$id)
result.table<-table(result$score)
result.table<-as.data.frame(result.table,stringsAsFactors = F)
result.table$Var1<-as.integer(result.table$Var1)
#result.table
table.len<-length(result.table$Var1)
number.of.positive.review = 0
number.of.negative.review = 0
number.of.neutral.review = 0
result.table$Var1[1]
for (i in 1:table.len){
ifelse(result.table$Var1[i] > 0, number.of.positive.review <- number.of.positive.review + result.table$Freq[i],
ifelse(result.table$Var1[i] < 0, number.of.negative.review <- number.of.negative.review + result.table$Freq[i],
number.of.neutral.review <- number.of.neutral.review + result.table$Freq[i]))
}
number.of.negative.review
number.of.positive.review
target.postop <- which.max(result$score) # 가장 점수가 높은 리뷰 indexing
reviews$content[target.postop]
reviews$content[which(result$total>=70)]
which(result$total>=70)
reviews$content[568]
result[568,]
reviews
result
sent.count<- reviews.word %>%
inner_join(get_sentiments("bing"), by="word") %>%
count(id,sentiment)
sent.count
sent.count<- reviews.word %>%
inner_join(get_sentiments("bing"), by="word") %>%
count(id,sentiment) %>%
mutate(pos = if(sentiment=="positive", n))
sent.count<- reviews.word %>%
inner_join(get_sentiments("bing"), by="word") %>%
count(id,sentiment)
sent.count<- reviews.word %>%
inner_join(get_sentiments("bing"), by="word") %>%
count(id,sentiment)
sent.count
which(sent.count$id==1)
which(sent.count$id==1 & sent.count$sentiment=="positive")
which(sent.count$id==5 & sent.count$sentiment=="positive")
which(sent.count$id==4 & sent.count$sentiment=="positive")
reviews.word %>%
inner_join(get_sentiments("bing"), by="word") %>%
count(id,sentiment)
sent.count<- reviews.word %>%
inner_join(get_sentiments("bing"), by="word") %>%
count(id,sentiment=="positive")
reviews.word %>%
inner_join(get_sentiments("bing"), by="word") %>%
count(id,sentiment=="positive")
reviews.word %>%
inner_join(get_sentiments("bing"), by="word") %>%
count(id,sentiment="positive")
reviews.word %>%
inner_join(get_sentiments("bing"), by="word") %>%
count(id,sentiment)
reviews.word %>%
inner_join(get_sentiments("bing"), by="word") %>%
count(id,sentiment)
reviews.word %>%
inner_join(get_sentiments("bing"), by="word") %>%
count(id,sentiment) %>%
filter(sentiment="positive")
reviews.word %>%
inner_join(get_sentiments("bing"), by="word") %>%
count(id,sentiment) %>%
filter(sentiment=="positive")
reviews.word %>%
inner_join(get_sentiments("bing"), by="word") %>%
count(id,sentiment) %>%
filter(sentiment=="positive")
# positive 갯수 추출을 위한 객체
pos <- reviews.word %>%
inner_join(get_sentiments("bing"), by="word") %>%
count(id,sentiment) %>%
filter(sentiment=="positive")
result<-reviews %>%
left_join(pos,by="id",all=T)
result
# positive 갯수 추출을 위한 객체
reviews.word %>%
inner_join(get_sentiments("bing"), by="word") %>%
count(id,sentiment) %>%
filter(sentiment=="positive") %>%
filter(n)
# positive 갯수 추출을 위한 객체
reviews.word %>%
inner_join(get_sentiments("bing"), by="word") %>%
count(id,sentiment) %>%
filter(sentiment=="positive")
# positive 갯수 추출을 위한 객체
reviews.word %>%
inner_join(get_sentiments("bing"), by="word") %>%
count(id,sentiment) %>%
filter(sentiment=="positive")
# positive 갯수 추출을 위한 객체
reviews.word %>%
inner_join(get_sentiments("bing"), by="word") %>%
count(id,sentiment) %>%
filter(sentiment=="positive")
# positive 갯수 추출을 위한 객체
reviews.word %>%
inner_join(get_sentiments("bing"), by="word") %>%
count(id,sentiment) %>%
filter(sentiment=="positive") %>%
select(id,n)
reviews.id = c(1:length(reviews.all))
reviews <- tibble("id" = reviews.id, "content"=reviews.all)
reviews.word <- reviews %>%
unnest_tokens(word, content)
# positive 갯수 추출을 위한 객체
pos <- reviews.word %>%
inner_join(get_sentiments("bing"), by="word") %>%
count(id,sentiment) %>%
filter(sentiment=="positive") %>%
select(id,n)
which(sent.count$id==4 & sent.count$sentiment=="positive")
# 결과 분석
result <- reviews.word %>%
inner_join(get_sentiments("bing"), by="word") %>%
mutate(wordScore=ifelse(sentiment=="positive", 1, -1)) %>%
group_by(id) %>%
summarise(score=sum(wordScore),total=sum(abs(wordScore)))
result<-reviews %>%
left_join(pos,by="id",all=T)
result
length(result$id)
result
reviews.id = c(1:length(reviews.all))
reviews <- tibble("id" = reviews.id, "content"=reviews.all)
reviews.word <- reviews %>%
unnest_tokens(word, content)
# positive 갯수 추출을 위한 객체
pos <- reviews.word %>%
inner_join(get_sentiments("bing"), by="word") %>%
count(id,sentiment) %>%
filter(sentiment=="positive") %>%
select(id,n)
# 결과 분석
result <- reviews.word %>%
inner_join(get_sentiments("bing"), by="word") %>%
mutate(wordScore=ifelse(sentiment=="positive", 1, -1)) %>%
group_by(id) %>%
summarise(score=sum(wordScore),total=sum(abs(wordScore)))
result<-result %>%
left_join(pos,by="id",all=T)
result
length(result$id)
length(result$id)
length(reviews.all)
length(result$id)
length(reviews.all)
result<-result %>%
left_join(pos,by="id",all.x=T)
length(reviews.all)
length(result$id)
length(reviews.all)
length(result$id)
# 결과 분석
result <- reviews.word %>%
inner_join(get_sentiments("bing"), by="word") %>%
mutate(wordScore=ifelse(sentiment=="positive", 1, -1)) %>%
group_by(id) %>%
summarise(score=sum(wordScore),total=sum(abs(wordScore)))
# x테스트
result
length(reviews.all)
length(result$id)
length(reviews.all)
length(result$id)
result
reviews
# 결과 분석
result.word <- reviews.word %>%
inner_join(get_sentiments("bing"), by="word") %>%
mutate(wordScore=ifelse(sentiment=="positive", 1, -1)) %>%
group_by(id) %>%
summarise(score=sum(wordScore),total=sum(abs(wordScore)))
result <- reviews
result %>%
left_join(result.word, all.x=T)
result %>%
left_join(result.word, all.x=T, by="id")
result <- result %>%
left_join(result.word, all.x=T, by="id")
length(result$id)
length(reviews.all)
result<- left_join(result, pos,by="id",all.x=T)
length(reviews.all)
length(result$id)
# x테스트
result
rename(result,"pos"=n)
rename(result,"n.positve"=n)
result$negative <- result$total - result$positive
result <- left_join(result, result.word, all.x=T, by="id") #감성 score 합치기
result <- left_join(result, pos,by="id",all.x=T) #positive 갯수 합치기
result <- rename(result,"positve"=n) #이름 수정
result
reviews.id = c(1:length(reviews.all))
reviews <- tibble("id" = reviews.id, "content"=reviews.all)
result <- reviews
# View(reviews.all)
reviews.word <- reviews %>%
unnest_tokens(word, content)
# positive 갯수 추출을 위한 객체
pos <- reviews.word %>%
inner_join(get_sentiments("bing"), by="word") %>%
count(id,sentiment) %>%
filter(sentiment=="positive") %>%
select(id,n)
# 감성 결과 분석
result.word <- reviews.word %>%
inner_join(get_sentiments("bing"), by="word") %>%
mutate(wordScore=ifelse(sentiment=="positive", 1, -1)) %>%
group_by(id) %>%
summarise(score=sum(wordScore),total=sum(abs(wordScore)))
result <- left_join(result, result.word, all.x=T, by="id") #감성 score 합치기
result <- left_join(result, pos,by="id",all.x=T) #positive 갯수 합치기
result <- rename(result,"positve"=n) #이름 수정
result$negative <- result$total - result$positive
result
result$negative <- result$total - result$positive
which(is.na(result$positive))
which(is.na(result$positive))
which(is.na(result$positve))
result[5]$positve
result$positve[5]
result$postive[which(is.na(result$positve))]=0
result$postive[which(is.na(result$positve))]=0
reviews.id = c(1:length(reviews.all))
reviews <- tibble("id" = reviews.id, "content"=reviews.all)
result <- reviews
# View(reviews.all)
reviews.word <- reviews %>%
unnest_tokens(word, content)
# positive 갯수 추출을 위한 객체
pos <- reviews.word %>%
inner_join(get_sentiments("bing"), by="word") %>%
count(id,sentiment) %>%
filter(sentiment=="positive") %>%
select(id,n)
# 감성 결과 분석
result.word <- reviews.word %>%
inner_join(get_sentiments("bing"), by="word") %>%
mutate(wordScore=ifelse(sentiment=="positive", 1, -1)) %>%
group_by(id) %>%
summarise(score=sum(wordScore),total=sum(abs(wordScore)))
result <- left_join(result, result.word, all.x=T, by="id") #감성 score 합치기
result <- left_join(result, pos,by="id",all.x=T) #positive 갯수 합치기
result <- rename(result,"positive"=n) #이름 수정
talbe(result$positve)
table(result$positve)
table(result$positive)
table(result$positive, na.rm=F)
table(result$positive, rm.na=F  )
table(result$positive, useNA = T)
table(result$positive, useNA = TRUE)
table(result$positive)
table(result$positive, useNA = 1)
table(result$positive, useNA = )
table(result$positive, useNA = "Details")
table(result$positive, useNA = "always")
sum(table(result$positive, useNA = "always"))
# 변환후 전체 갯수 확인
# table(result$positive, useNA = "always")
result[673,]
result$negative <- result$total - result$positive
result
result.table<-table(result$score)
result.table<-as.data.frame(result.table,stringsAsFactors = F)
result.table$Var1<-as.integer(result.table$Var1)
# result.table
table.len<-length(result.table$Var1)
number.of.positive.review = 0
number.of.negative.review = 0
number.of.neutral.review = 0
# result.table$Var1[1]
for (i in 1:table.len){
ifelse(result.table$Var1[i] > 0, number.of.positive.review <- number.of.positive.review + result.table$Freq[i],
ifelse(result.table$Var1[i] < 0, number.of.negative.review <- number.of.negative.review + result.table$Freq[i],
number.of.neutral.review <- number.of.neutral.review + result.table$Freq[i]))
}
number.of.negative.review
number.of.positive.review
print(sum(number.of.negative.review,
number.of.positive.review,
number.of.neutral.review))
# x테스트
# result
length(reviews.all)
length(result$id)
length(result$score)
table.len
target.postop <- which.max(result$score) # 가장 점수가 높은 리뷰 indexing
result$total[536]
reviews$content[target.postop]
target.negtop <- which.min(result$score) # 가장 점수가 높은 리뷰 indexing
reviews$content[target.negtop]
ggplot(result.table, aes(x=Var1,y=Freq))+
geom_col()
ggplot(result.table, aes(x=Var1,y=Freq))+
geom_col(xlab="Score", ylab="Frequency")
ggplot(result.table, aes(x=Var1,y=Freq))+
geom_bar(xlab="Score", ylab="Frequency")
ggplot(result.table, aes(x=Var1,y=Freq))+
geom_col(xlabel="Score", ylab="Frequency")
reviews.all
write.table(reviews.all,"test.txt")
productName="LG-Electronics-49UK6300PUE-49-Inch-Ultra"
fileName = paste0(productName,".txt", collapse="")
write.table(reviews.all,".txt")
write.table(reviews.all,fileName)
library(KoNLP)
library(rvest)
library(stringr)
library(rJava)
library(dplyr)
library(readr)
library(ggplot2)
library(tidyr)
library(tidytext)
library(RWeka)
library(tm)
library(SnowballC)
library(KoNLP)
library(rvest)
library(stringr)
library(rJava)
library(dplyr)
library(readr)
library(ggplot2)
library(tidyr)
library(tidytext)
library(RWeka)
library(tm)
library(SnowballC)
productName="Dyson-Motorhead-Cordless-Cleaner-227591-01"
url.base <- "https://www.amazon.com/Dyson-Motorhead-Cordless-Cleaner-227591-01/product-reviews/B01MSZ036Q/ref=cm_cr_arp_d_paging_btm_next_2?ie=UTF8&reviewerType=all_reviews&pageNumber="
page = 1
url<-paste0(url.base,page,collapse="")
htxt<-read_html(url)
reviews.count <- htxt %>%
html_nodes("[data-hook=total-review-count]") %>%
html_text
page.end = ceiling(as.integer(reviews.count)/10)
reviews.all <- c()
for (page in 1:page.end){
url<-paste0(url.base,page,collapse="")
htxt<-read_html(url)
reviews.temp <- htxt %>%
html_nodes("[data-hook=review-body]") %>%
html_text %>%
str_replace_all("[[:space:]]{1,}", " ")
reviews.all<-c(reviews.all, reviews.temp)
print(paste("page", page, "complete"))
}
reviews.count <- htxt %>%
html_nodes("[data-hook=total-review-count]") %>%
html_text
print(htxt)
print(reviews.count)
print(url)
htxt %>%
html_nodes("[data-hook=total-review-count]") %>%
html_text
htxt %>%
html_nodes("[data-hook=review-body]") %>%
html_text
